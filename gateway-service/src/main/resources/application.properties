server.port=8081
spring.application.name=gateway-service
#server.error.include-stacktrace=never
#server.error.include-message=always

# Token/Autenticacao do usuário
jwt.public.key=../../credentials/auth-service-jwt-public.pem

# Kafka
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=gateway-group
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.value.default.type=java.util.HashMap
spring.kafka.consumer.auto-offset-reset=earliest

# Token/Autenticação entre microserviços
app.security.oauth2.client-id=gateway-service
spring.security.oauth2.client.registration.gateway-service.provider=keycloak
spring.security.oauth2.client.registration.gateway-service.client-id=gateway-service
spring.security.oauth2.client.registration.gateway-service.client-secret=MYMRSdkBs0swrmt778bcg5zauwMbUBqQ
spring.security.oauth2.client.registration.gateway-service.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.gateway-service.scope=auth-service,user-info-service
spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:8080/realms/master/protocol/openid-connect/token

# URLs dos microservicos
auth-service.url=http://localhost:9000/api/internal
user-info-service.url=http://localhost:9001/api/internal

# Cache
spring.cache.type=redis
spring.data.redis.host=localhost
spring.data.redis.port=6379
app.cache.default-ttl=1m
app.cache.auth-service.user-roles.duration=90s

# DevTools
spring.devtools.restart.trigger-file=.reloadtrigger
spring.devtools.livereload.enabled=false
